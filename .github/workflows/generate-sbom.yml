name: Generate SBOM and Deploy it in Acquia

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  generate_and_deploy_sbom:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, pdo_mysql, zip # Add any necessary PHP extensions
          tools: composer:v2 # Specify Composer version if needed

      - name: Install Composer dependencies
        run: composer install --no-ansi --no-interaction --no-progress --prefer-dist

      - name: Run tests (example)
        run: ./vendor/bin/phpunit --configuration phpunit.xml # Replace with your actual test command

      # Generate the SBOM with Anchore Syft
      - name: Generate the SBOM with Anchore Syft
        uses: anchore/sbom-action@v0
        id: sbom_generate
        with:
          # We can specific the SBOM format that we prefer (SPDX, CycloneDX)
          format: 'spdx-json' 
          # Opcional: Ruta del artefacto SBOM
          path: .
          artifact-name: 'drupal-sbom'

      # Save the SBOM artifact in GitHub
      - name: Upload the SBOM artifact in GitHub
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifact
          path: drupal-sbom.spdx.json
          
      # Deploy in Acquia (using a pipeline or an script)
      # Note: This step depends ofyour current deploy set up in Acquia. You may need to adjust it accordingly.

      - name: Deploy to Acquia Cloud
        #env:
          #SSH_PRIVATE_KEY: ${{ secrets.ACQUIA_SSH_PRIVATE_KEY }}
          #ACQUIA_TOKEN: ${{ secrets.ACQUIA_TOKEN }}
          #REPOSITORY: ${{ secrets.REPOSITORY }}
          #ACQUIA_APP_ID: ${{ secrets.APP_ID }}
          #ACQUIA_APP_NAME: ${{ secrets.APP_ID }}
          #ACQUIA_USERNAME: ${{ secrets.ACQUIA_USERNAME }}
          #ACQUIA_GIT_SERVER: ${{ secrets.ACQUIA_GIT_SERVER }}
          #GITHUB_USER: ${{ secrets.GITHUB_USER }}
        run: |
          #mkdir -p ~/.ssh
          #echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          #chmod 600 ~/.ssh/id_rsa
          #ssh-keyscan -H [your-acquia-git-server] >> ~/.ssh/known_hosts # Replace with your Acquia Git server
          #git remote add acquia ssh://[acquia-username]@[your-acquia-git-server]:2222/[acquia-app-name].git # Replace with your Acquia details
          
          #ssh-keyscan -H "$ACQUIA_GIT_SERVER" >> ~/.ssh/known_hosts
          #git remote add acquia ssh://"$ACQUIA_USERNAME"@"$ACQUIA_GIT_SERVER":2222/"$ACQUIA_APP_NAME".git
          #git push acquia HEAD:master # Push to your Acquia Cloud repository

          # For example, use the Acquia Pipelines client ( it requires previous installation and configuration)
          # pipelines start --application-id=[APP_ID] [USER]/[REPO-NAME] [TOKEN]
          # pipelines start --application-id=$ACQUIA_APP_ID $GITHUB_USER/$REPOSITORY $ACQUIA_TOKEN
          # Or use the workflow based in git, the push in Acquia
          # git push acq-repo HEAD:master
          ECHO "Deploy step needs to be configured based on your Acquia setup."
         